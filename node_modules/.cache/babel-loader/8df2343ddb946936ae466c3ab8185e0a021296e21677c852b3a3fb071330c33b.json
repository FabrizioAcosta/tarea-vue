{"ast":null,"code":"export default {\n  name: \"AddTask\",\n  props: {\n    tasks: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      newTask: \"\" // Campo de entrada para la nueva tarea\n    };\n  },\n  methods: {\n    addTask() {\n      if (this.newTask.trim() === \"\") return;\n      const task = {\n        todo: this.newTask,\n        completed: false,\n        id: Date.now() // Usamos el timestamp para asegurar un ID único\n      };\n\n      // Emitimos la nueva tarea al componente principal\n      this.$emit('add-task', task);\n      this.newTask = \"\"; // Limpiar el campo de entrada después de agregar\n    },\n    // Elimina una tarea específica de la lista\n    deleteTask(task) {\n      this.$emit('delete-task', task.id);\n    },\n    // Cambia el estado de la tarea entre completada y no completada\n    toggleTaskCompletion(task) {\n      task.completed = !task.completed;\n    }\n  }\n};","map":{"version":3,"names":["name","props","tasks","type","Array","required","data","newTask","methods","addTask","trim","task","todo","completed","id","Date","now","$emit","deleteTask","toggleTaskCompletion"],"sources":["src/views/AddTask.vue"],"sourcesContent":["<template>\n    <div class=\"container my-5\">\n      <h1 class=\"text-center mb-4\">Añadir Tarea</h1>\n  \n      <!-- Caja para el formulario y las tareas -->\n      <div class=\"task-box p-4 border rounded shadow-sm\">\n        <!-- Formulario para agregar tarea -->\n        <div class=\"input-group mb-4\">\n          <input\n            v-model=\"newTask\"\n            @keyup.enter=\"addTask\"\n            placeholder=\"Añadir nueva tarea\"\n            class=\"form-control\"\n            aria-label=\"Nueva Tarea\"\n          />\n          <button @click=\"addTask\" class=\"btn btn-primary\">\n            <i class=\"fas fa-plus\"></i> Añadir\n          </button>\n        </div>\n  \n        <!-- Lista de tareas añadidas -->\n        <div v-if=\"tasks.length > 0\" class=\"list-group\">\n          <div v-for=\"task in tasks\" :key=\"task.id\" class=\"list-group-item task-item d-flex justify-content-between align-items-center\">\n            <!-- Tarea con su estado -->\n            <div>\n              <span :class=\"{ completed: task.completed }\">{{ task.todo }}</span>\n            </div>\n  \n            <!-- Botones para completar/desmarcar y eliminar -->\n            <div>\n              <!-- Cambiar ícono según si la tarea está completada o no -->\n              <button class=\"btn btn-outline-success me-2\" @click=\"toggleTaskCompletion(task)\" aria-label=\"Marcar como completada\">\n                <i v-if=\"task.completed\" class=\"bi bi-check-circle-fill\"></i> <!-- Palomita llena cuando está completada -->\n                <i v-else class=\"bi bi-check-circle\"></i> <!-- Palomita vacía cuando está pendiente -->\n              </button>\n              <button class=\"btn btn-outline-danger\" @click=\"deleteTask(task)\" aria-label=\"Eliminar tarea\">\n                <i class=\"bi bi-trash\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n  \n        <!-- Mensaje si no hay tareas -->\n        <div v-else class=\"alert alert-warning mt-4\">\n          No hay tareas disponibles.\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: \"AddTask\",\n    props: {\n      tasks: {\n        type: Array,\n        required: true,\n      },\n    },\n    data() {\n      return {\n        newTask: \"\", // Campo de entrada para la nueva tarea\n      };\n    },\n    methods: {\n      addTask() {\n        if (this.newTask.trim() === \"\") return;\n  \n        const task = {\n          todo: this.newTask,\n          completed: false,\n          id: Date.now(), // Usamos el timestamp para asegurar un ID único\n        };\n  \n        // Emitimos la nueva tarea al componente principal\n        this.$emit('add-task', task);\n        this.newTask = \"\"; // Limpiar el campo de entrada después de agregar\n      },\n  \n      // Elimina una tarea específica de la lista\n      deleteTask(task) {\n        this.$emit('delete-task', task.id);\n      },\n  \n      // Cambia el estado de la tarea entre completada y no completada\n      toggleTaskCompletion(task) {\n        task.completed = !task.completed;\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Estilos para la caja principal donde se encuentra el formulario */\n  .task-box {\n    max-width: 600px;\n    margin: 0 auto;\n    background-color: #f9f9f9;\n  }\n  \n  /* Estilos para los botones e iconos */\n  button {\n    margin-left: 10px;\n  }\n  \n  button i {\n    margin-right: 5px;\n  }\n  \n  /* Estilo para marcar las tareas como completadas */\n  .completed {\n    text-decoration: line-through;\n    color: gray;\n  }\n  \n  /* Estilo para las tareas con el recuadro azul */\n  .task-item {\n    border: 2px solid #007bff;\n    border-radius: 5px;\n    margin-bottom: 10px;\n    padding: 10px;\n    background-color: #f0f8ff;\n  }\n  \n  .task-item:hover {\n    background-color: #e0f7ff;\n  }\n  \n  /* Estilo para el campo de entrada */\n  .input-group {\n    display: flex;\n    margin-bottom: 10px;\n  }\n  \n  .form-control {\n    flex-grow: 1;\n  }\n  \n  .list-group-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n  }\n  \n  .list-group-item .btn {\n    margin-left: 5px;\n  }\n  \n  .list-group-item .completed {\n    text-decoration: line-through;\n    color: gray;\n  }\n  </style>\n  "],"mappings":"AAmDA;EACAA,IAAA;EACAC,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,QAAA;MACA,SAAAF,OAAA,CAAAG,IAAA;MAEA,MAAAC,IAAA;QACAC,IAAA,OAAAL,OAAA;QACAM,SAAA;QACAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;MACA;;MAEA;MACA,KAAAC,KAAA,aAAAN,IAAA;MACA,KAAAJ,OAAA;IACA;IAEA;IACAW,WAAAP,IAAA;MACA,KAAAM,KAAA,gBAAAN,IAAA,CAAAG,EAAA;IACA;IAEA;IACAK,qBAAAR,IAAA;MACAA,IAAA,CAAAE,SAAA,IAAAF,IAAA,CAAAE,SAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}