{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"CombinedView\",\n  data() {\n    return {\n      tasks: [],\n      // Lista de tareas\n      newTask: \"\" // Nueva tarea para añadir\n    };\n  },\n  mounted() {\n    // Cargar las tareas automáticamente al acceder a la vista\n    this.fetchTasks();\n  },\n  methods: {\n    // Obtiene todas las tareas desde la API\n    async fetchTasks() {\n      try {\n        const response = await fetch(\"https://dummyjson.com/todos\");\n        if (!response.ok) {\n          throw new Error(`Error al obtener tareas: ${response.status}`);\n        }\n        const data = await response.json();\n        this.tasks = data.todos; // Asignar las tareas a la lista\n      } catch (error) {\n        console.error(\"Error al cargar tareas desde la API:\", error.message);\n        alert(\"No se pudo cargar las tareas desde la API. Verifica la consola para más detalles.\");\n      }\n    },\n    // Añade una nueva tarea\n    addTask() {\n      if (this.newTask.trim() === \"\") {\n        alert(\"Por favor, escribe una descripción para la tarea.\");\n        return;\n      }\n      const newTask = {\n        id: Date.now(),\n        // Genera un ID único\n        todo: this.newTask,\n        completed: false\n      };\n      this.tasks.push(newTask);\n      this.newTask = \"\"; // Limpia el campo de entrada\n    },\n    // Cambia el estado de completado de una tarea\n    toggleTaskCompletion(task) {\n      task.completed = !task.completed;\n    },\n    // Elimina una tarea\n    deleteTask(task) {\n      this.tasks = this.tasks.filter(t => t.id !== task.id);\n    }\n  }\n};","map":{"version":3,"names":["name","data","tasks","newTask","mounted","fetchTasks","methods","response","fetch","ok","Error","status","json","todos","error","console","message","alert","addTask","trim","id","Date","now","todo","completed","push","toggleTaskCompletion","task","deleteTask","filter","t"],"sources":["src/views/CombinedView.vue"],"sourcesContent":["<template>\n    <div class=\"container my-5\">\n      <!-- Caja para añadir nuevas tareas -->\n      <div class=\"task-box p-4 border rounded shadow-sm\">\n        <!-- Formulario para añadir nueva tarea -->\n        <div class=\"mb-4\">\n          <h3 class=\"text-center\">Añadir Nueva Tarea</h3>\n          <form @submit.prevent=\"addTask\">\n            <div class=\"mb-3\">\n              <label for=\"newTask\" class=\"form-label\">Descripción de la Tarea</label>\n              <input\n                id=\"newTask\"\n                v-model=\"newTask\"\n                type=\"text\"\n                class=\"form-control\"\n                placeholder=\"Escribe la descripción de la tarea\"\n              />\n            </div>\n            <button type=\"submit\" class=\"btn btn-success d-block mx-auto\">Añadir Tarea</button>\n          </form>\n        </div>\n  \n        <!-- Lista de tareas -->\n        <div v-if=\"tasks.length > 0\" class=\"task-list\">\n          <h3 class=\"text-center\">Lista de Tareas</h3>\n          <div v-for=\"task in tasks\" :key=\"task.id\" class=\"task-item card my-2\">\n            <div class=\"card-body d-flex justify-content-between align-items-center\">\n              <div class=\"task-text\">\n                <h5 :style=\"{ textDecoration: task.completed ? 'line-through' : 'none' }\">\n                  {{ task.todo }}\n                </h5>\n                <!-- Estado de la tarea con colores de fondo -->\n                <span :class=\"task.completed ? 'completed' : 'pending'\">\n                  {{ task.completed ? 'Completada' : 'Pendiente' }}\n                </span>\n              </div>\n              <div>\n                <!-- Botón Completar/Desmarcar -->\n                <button\n                  class=\"btn btn-outline-success btn-sm me-2\"\n                  @click=\"toggleTaskCompletion(task)\"\n                >\n                  <i class=\"bi\" :class=\"task.completed ? 'bi-check-circle-fill' : 'bi-check-circle'\"></i>\n                </button>\n  \n                <!-- Botón Eliminar con ícono -->\n                <button\n                  class=\"btn btn-sm btn-outline-danger\"\n                  @click=\"deleteTask(task)\"\n                >\n                  <i class=\"bi bi-trash\"></i> <!-- Ícono de basura -->\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n  \n        <div v-else>\n          <p class=\"text-center\">No hay tareas disponibles.</p>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: \"CombinedView\",\n    data() {\n      return {\n        tasks: [], // Lista de tareas\n        newTask: \"\", // Nueva tarea para añadir\n      };\n    },\n    mounted() {\n      // Cargar las tareas automáticamente al acceder a la vista\n      this.fetchTasks();\n    },\n    methods: {\n      // Obtiene todas las tareas desde la API\n      async fetchTasks() {\n        try {\n          const response = await fetch(\"https://dummyjson.com/todos\");\n          if (!response.ok) {\n            throw new Error(`Error al obtener tareas: ${response.status}`);\n          }\n          const data = await response.json();\n          this.tasks = data.todos; // Asignar las tareas a la lista\n        } catch (error) {\n          console.error(\"Error al cargar tareas desde la API:\", error.message);\n          alert(\"No se pudo cargar las tareas desde la API. Verifica la consola para más detalles.\");\n        }\n      },\n      // Añade una nueva tarea\n      addTask() {\n        if (this.newTask.trim() === \"\") {\n          alert(\"Por favor, escribe una descripción para la tarea.\");\n          return;\n        }\n        const newTask = {\n          id: Date.now(), // Genera un ID único\n          todo: this.newTask,\n          completed: false,\n        };\n        this.tasks.push(newTask);\n        this.newTask = \"\"; // Limpia el campo de entrada\n      },\n      // Cambia el estado de completado de una tarea\n      toggleTaskCompletion(task) {\n        task.completed = !task.completed;\n      },\n      // Elimina una tarea\n      deleteTask(task) {\n        this.tasks = this.tasks.filter((t) => t.id !== task.id);\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Caja para formulario y tareas, ampliamos el tamaño */\n  .task-box {\n    max-width: 900px;\n    margin: 0 auto;\n    background-color: #f9f9f9;\n    border: 1px solid #007bff;\n    border-radius: 10px;\n    padding: 30px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n  \n  /* Contenedor de las tareas, para que se centren */\n  .task-list {\n    display: flex;\n    flex-direction: column;\n    align-items: center; /* Centra las tarjetas */\n    justify-content: center;\n    margin-top: 20px;\n  }\n  \n  /* Estilos para las tarjetas de las tareas */\n  .task-item {\n    border: 2px solid #007bff;\n    border-radius: 10px;\n    padding: 15px;\n    background-color: #f0f8ff;\n    width: 80%; /* Tamaño de las tarjetas */\n    max-width: 800px; /* Limitar el ancho máximo */\n    margin-bottom: 15px;\n    text-align: center; /* Centrado de todo el contenido de la tarjeta */\n  }\n  \n  .task-item:hover {\n    background-color: #e0f7ff;\n  }\n  \n  .card-body {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    text-align: center; /* Centrado de todo el contenido de la tarjeta */\n  }\n  \n  h5 {\n    margin: 0;\n    text-align: center; /* Centrado de texto */\n  }\n  \n  .card-body .btn {\n    margin-left: 10px;\n  }\n  \n  h1, h3 {\n    color: #007bff;\n    text-align: center;\n  }\n  \n  /* Estilos para el formulario */\n  input.form-control {\n    margin-bottom: 10px;\n  }\n  \n  button.d-block.mx-auto {\n    width: 150px;\n    margin: 0 auto;\n    display: block;\n  }\n  \n  /* Clases para el estado de las tareas */\n  .pending {\n    background-color: #f1c40f; /* Mostaza */\n    color: white;\n    padding: 2px 10px;\n    border-radius: 5px;\n  }\n  \n  .completed {\n    background-color: green;\n    color: white;\n    padding: 2px 10px;\n    border-radius: 5px;\n  }\n  </style>\n  "],"mappings":";AAiEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACA;IACA,MAAAD,WAAA;MACA;QACA,MAAAE,QAAA,SAAAC,KAAA;QACA,KAAAD,QAAA,CAAAE,EAAA;UACA,UAAAC,KAAA,6BAAAH,QAAA,CAAAI,MAAA;QACA;QACA,MAAAV,IAAA,SAAAM,QAAA,CAAAK,IAAA;QACA,KAAAV,KAAA,GAAAD,IAAA,CAAAY,KAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,yCAAAA,KAAA,CAAAE,OAAA;QACAC,KAAA;MACA;IACA;IACA;IACAC,QAAA;MACA,SAAAf,OAAA,CAAAgB,IAAA;QACAF,KAAA;QACA;MACA;MACA,MAAAd,OAAA;QACAiB,EAAA,EAAAC,IAAA,CAAAC,GAAA;QAAA;QACAC,IAAA,OAAApB,OAAA;QACAqB,SAAA;MACA;MACA,KAAAtB,KAAA,CAAAuB,IAAA,CAAAtB,OAAA;MACA,KAAAA,OAAA;IACA;IACA;IACAuB,qBAAAC,IAAA;MACAA,IAAA,CAAAH,SAAA,IAAAG,IAAA,CAAAH,SAAA;IACA;IACA;IACAI,WAAAD,IAAA;MACA,KAAAzB,KAAA,QAAAA,KAAA,CAAA2B,MAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAV,EAAA,KAAAO,IAAA,CAAAP,EAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}